---
# Source: nginx/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: nginx
  namespace: "test"
  labels:
    app.kubernetes.io/name: nginx
  annotations:
spec:
  # type: LoadBalancer
  # type: Nodeport
  type: ClusterIP
  sessionAffinity: None
  # externalTrafficPolicy: "Cluster"
  ports:
    - name: http
      port: 80
      targetPort: http
  selector:
    app.kubernetes.io/name: nginx
---
# configmap挂载nginx.conf配置文件
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-conf
  namespace: test
data:
  nginx.conf: |
    user nginx;
    worker_processes 1;
    error_log  /var/log/nginx/error.log;    
    events {
      worker_connections  1024;
    }
    http {      
      access_log	/var/log/nginx/access.log;
      server {
          listen  80;
          server_name  _;
          location / {
              root   html;
              index  index.html index.htm;
          }
      }
    }
---
# Source: nginx/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx
  namespace: "test"
  labels:
    app.kubernetes.io/name: nginx
spec:
  replicas: 1
  strategy:
    rollingUpdate: {}
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: nginx
  template:
    metadata:
      labels:
        app.kubernetes.io/name: nginx
      annotations:
    spec:      
      automountServiceAccountToken: false
      shareProcessNamespace: false
      serviceAccountName: default
      affinity:
        podAffinity:          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: nginx
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:          
      hostNetwork: false
      hostIPC: false
      initContainers:
      containers:
        - name: nginx
          image: docker.io/nginx:1.23
          imagePullPolicy: "IfNotPresent"
          env:
          envFrom:
          ports:
            - name: http
              containerPort: 80
          livenessProbe:
            failureThreshold: 5
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            tcpSocket:
              port: http
          readinessProbe:
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 3
            tcpSocket:
              port: http
          resources:
            limits: {}
            requests: {}
          volumeMounts:
          # mount nginx-conf volumn to /etc/nginx
          - mountPath: /etc/nginx
            readOnly: true
            name: nginx-conf
          - mountPath: /var/log/nginx
            name: log
      volumes:
      - name: nginx-conf
        configMap:
          name: nginx-conf
          items:
            - key: nginx.conf
              path: nginx.conf
      - name: log
        emptyDir: {}